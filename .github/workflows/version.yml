name: Create New Version

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number'
        required: true
      description:
        description: 'Version description'
        required: true
      downloadURL:
        description: 'Download URL for the new version'
        required: true

jobs:
  update-version:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v2
    
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'
    
    - name: Install dependencies
      run: |
        pip install requests

    - name: Update repo.json with new version
      run: |
        import json
        import requests
        from datetime import datetime
        
        # Get the input variables from GitHub Actions workflow inputs
        version = "${{ github.event.inputs.version }}"
        description = "${{ github.event.inputs.description }}"
        download_url = "${{ github.event.inputs.downloadURL }}"
        
        # Function to fetch the IPA size
        def get_ipa_size(download_url):
            try:
                response = requests.head(download_url)
                if response.status_code == 200:
                    return int(response.headers.get('Content-Length', 0))
                else:
                    print(f"Error fetching IPA file size from {download_url}. Status code: {response.status_code}")
                    return 0
            except requests.RequestException as e:
                print(f"Error during request: {e}")
                return 0
        
        # Fetch the size of the IPA file
        ipa_size = get_ipa_size(download_url)
        
        # Get the current date and time in ISO format
        version_date = datetime.utcnow().isoformat() + "Z"
        
        # Path to the repo.json file
        repo_file_path = 'repo.json'
        
        # Read the existing repo.json file
        with open(repo_file_path, 'r') as f:
            data = json.load(f)
        
        # Prepare the new version data
        new_version = {
            "version": version,
            "date": version_date,
            "localizedDescription": description,
            "downloadURL": download_url,
            "size": ipa_size
        }
        
        # Find the YouTube Plus app and add the new version
        for app in data["apps"]:
            if app["bundleIdentifier"] == "com.YouTubePlus.YTPlus":
                app["versions"].append(new_version)
                break
        
        # Write the updated data back to repo.json
        with open(repo_file_path, 'w') as f:
            json.dump(data, f, indent=2)
        
    - name: Commit changes
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add repo.json
        git commit -m "Add new version ${GITHUB_REF_NAME}"
        git push
